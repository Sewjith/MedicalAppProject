import 'package:flutter/material.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';

class Medicine {
  final String name;
  final List<String> dosageOptions; // e.g. ["250 mg", "500 mg", "1000 mg"]

  Medicine({required this.name, required this.dosageOptions});
}

class SelectedMedicine {
  final Medicine medicine;
  String dosage;
  String frequency;
  int duration; // in days
  String instructions;

  SelectedMedicine({
    required this.medicine,
    required this.dosage,
    required this.frequency,
    required this.duration,
    this.instructions = "",
  });
}

class PrescriptionSelectorPage extends StatefulWidget {
  const PrescriptionSelectorPage({super.key});

  @override
  _PrescriptionSelectorPageState createState() =>
      _PrescriptionSelectorPageState();
}

class _PrescriptionSelectorPageState extends State<PrescriptionSelectorPage> {
  final List<Medicine> _availableMedicines = [
    Medicine(
        name: 'Paracetamol', dosageOptions: ['250 mg', '500 mg', '1000 mg']),
    Medicine(name: 'Ibuprofen', dosageOptions: ['200 mg', '400 mg', '600 mg']),
    Medicine(name: 'Amoxicillin', dosageOptions: ['250 mg', '500 mg']),
    Medicine(name: 'Ciprofloxacin', dosageOptions: ['250 mg', '500 mg']),
    Medicine(name: 'Metformin', dosageOptions: ['500 mg', '850 mg', '1000 mg']),
    Medicine(
        name: 'Atorvastatin',
        dosageOptions: ['10 mg', '20 mg', '40 mg', '80 mg']),
    Medicine(name: 'Lisinopril', dosageOptions: ['5 mg', '10 mg', '20 mg']),
    Medicine(name: 'Omeprazole', dosageOptions: ['10 mg', '20 mg', '40 mg']),
    Medicine(name: 'Amlodipine', dosageOptions: ['2.5 mg', '5 mg', '10 mg']),
    Medicine(name: 'Losartan', dosageOptions: ['25 mg', '50 mg', '100 mg']),
  ];

  final List<SelectedMedicine> _selectedMedicines = [];

  final List<String> _frequencyOptions = [
    'Once a day',
    'Twice a day',
    'Three times a day',
  ];

  void _selectMedicine(Medicine medicine) async {
    final SelectedMedicine? result =
        await showModalBottomSheet<SelectedMedicine>(
      context: context,
      isScrollControlled: true,
      builder: (context) {
        return MedicineOptionsSheet(
          medicine: medicine,
          frequencyOptions: _frequencyOptions,
        );
      },
    );

    if (result != null) {
      setState(() {
        _selectedMedicines.add(result);
      });
    }
  }

  Future<void> _printPrescription() async {
    final pdf = pw.Document();
    pdf.addPage(
      pw.Page(
        build: (pw.Context context) {
          return pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Text('Prescription',
                    style: pw.TextStyle(
                        fontSize: 22, fontWeight: pw.FontWeight.bold)),
                pw.SizedBox(height: 10),
                ..._selectedMedicines.map((item) => pw.Text(
                    '${item.medicine.name} - ${item.dosage}, ${item.frequency}, for ${item.duration} days.\nNotes: ${item.instructions}',
                    style: pw.TextStyle(fontSize: 14))),
              ]);
        },
      ),
    );
    await Printing.layoutPdf(onLayout: (format) async => pdf.save());
  }

  void _submitPrescription() {
    print('Prescription:');
    for (var item in _selectedMedicines) {
      print(
          '${item.medicine.name} - ${item.dosage}, ${item.frequency}, for ${item.duration} days. Notes: ${item.instructions}');
    }
    showDialog(
      context: context,
      builder: (context) {
        return Dialog(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
          child: Padding(
            padding: const EdgeInsets.all(20),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                const Icon(Icons.check_circle, size: 60, color: Colors.green),
                const SizedBox(height: 20),
                const Text(
                  "Prescription Submitted!",
                  style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 10),
                const Text(
                  "Your prescription has been submitted. What would you like to do next?",
                  style: TextStyle(fontSize: 16),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    ElevatedButton(
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                      style: ElevatedButton.styleFrom(
                        minimumSize: const Size(120, 45),
                        backgroundColor: Colors.blueAccent,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child: const Text("Done",
                          style: TextStyle(fontSize: 16, color: Colors.white)),
                    ),
                    ElevatedButton(
                      onPressed: () {
                        _printPrescription();
                        Navigator.of(context).pop();
                      },
                      style: ElevatedButton.styleFrom(
                        minimumSize: const Size(120, 45),
                        backgroundColor: Colors.green,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child: const Text("Print",
                          style: TextStyle(fontSize: 16, color: Colors.white)),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Prescription Tool'),
        backgroundColor: Colors.blueAccent,
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.blue.shade100, Colors.white],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            // Display selected prescription items.
            if (_selectedMedicines.isNotEmpty)
              Expanded(
                flex: 2,
                child: Card(
                  elevation: 6,
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8)),
                  child: ListView.builder(
                    padding: const EdgeInsets.all(12),
                    itemCount: _selectedMedicines.length,
                    itemBuilder: (context, index) {
                      final item = _selectedMedicines[index];
                      return ListTile(
                        leading: CircleAvatar(
                          backgroundColor: Colors.blueAccent,
                          child: Text(item.medicine.name[0],
                              style: const TextStyle(color: Colors.white)),
                        ),
                        title: Text(item.medicine.name,
                            style:
                                const TextStyle(fontWeight: FontWeight.bold)),
                        subtitle: Text(
                            '${item.dosage}, ${item.frequency}, for ${item.duration} days.\nNotes: ${item.instructions}'),
                        trailing: IconButton(
                          icon:
                              const Icon(Icons.delete, color: Colors.redAccent),
                          onPressed: () {
                            setState(() {
                              _selectedMedicines.removeAt(index);
                            });
                          },
                        ),
                      );
                    },
                  ),
                ),
              ),
            const SizedBox(height: 16),
            // List of available medicines.
            Expanded(
              flex: 3,
              child: Card(
                elevation: 6,
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8)),
                child: ListView.builder(
                  padding: const EdgeInsets.all(12),
                  itemCount: _availableMedicines.length,
                  itemBuilder: (context, index) {
                    final medicine = _availableMedicines[index];
                    return ListTile(
                      title: Text(medicine.name,
                          style: const TextStyle(fontWeight: FontWeight.w600)),
                      trailing: ElevatedButton(
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.green,
                          shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8)),
                        ),
                        child: const Text('Select',
                            style: TextStyle(color: Colors.white)),
                        onPressed: () => _selectMedicine(medicine),
                      ),
                    );
                  },
                ),
              ),
            ),
            const SizedBox(height: 16),
            SizedBox(
              width: double.infinity,
              height: 50,
              child: ElevatedButton(
                onPressed:
                    _selectedMedicines.isEmpty ? null : _submitPrescription,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blueAccent,
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8)),
                ),
                child: const Text(
                  'Submit Prescription',
                  style: TextStyle(fontSize: 18, color: Colors.white),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class MedicineOptionsSheet extends StatefulWidget {
  final Medicine medicine;
  final List<String> frequencyOptions;

  const MedicineOptionsSheet({
    super.key,
    required this.medicine,
    required this.frequencyOptions,
  });

  @override
  _MedicineOptionsSheetState createState() => _MedicineOptionsSheetState();
}

class _MedicineOptionsSheetState extends State<MedicineOptionsSheet> {
  late String _selectedDosage;
  late String _selectedFrequency;
  int _duration = 7;
  String _instructions = '';

  @override
  void initState() {
    super.initState();
    _selectedDosage = widget.medicine.dosageOptions.first;
    _selectedFrequency = widget.frequencyOptions.first;
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: EdgeInsets.only(
        bottom: MediaQuery.of(context).viewInsets.bottom,
        top: 16,
        left: 16,
        right: 16,
      ),
      child: SingleChildScrollView(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              'Add ${widget.medicine.name}',
              style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            // Dosage selection.
            Row(
              children: [
                const Text('Dosage:'),
                const SizedBox(width: 16),
                DropdownButton<String>(
                  value: _selectedDosage,
                  items: widget.medicine.dosageOptions
                      .map((d) => DropdownMenuItem(
                            value: d,
                            child: Text(d),
                          ))
                      .toList(),
                  onChanged: (value) {
                    if (value != null) {
                      setState(() {
                        _selectedDosage = value;
                      });
                    }
                  },
                ),
              ],
            ),
            const SizedBox(height: 16),
            // Frequency selection.
            Row(
              children: [
                const Text('Frequency:'),
                const SizedBox(width: 16),
                DropdownButton<String>(
                  value: _selectedFrequency,
                  items: widget.frequencyOptions
                      .map((f) => DropdownMenuItem(
                            value: f,
                            child: Text(f),
                          ))
                      .toList(),
                  onChanged: (value) {
                    if (value != null) {
                      setState(() {
                        _selectedFrequency = value;
                      });
                    }
                  },
                ),
              ],
            ),
            const SizedBox(height: 16),
            // Duration input.
            Row(
              children: [
                const Text('Duration (days):'),
                const SizedBox(width: 16),
                Expanded(
                  child: TextFormField(
                    initialValue: _duration.toString(),
                    keyboardType: TextInputType.number,
                    onChanged: (value) {
                      setState(() {
                        _duration = int.tryParse(value) ?? 7;
                      });
                    },
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            // Additional instructions.
            TextFormField(
              decoration: const InputDecoration(
                labelText: 'Additional Instructions (optional)',
                border: OutlineInputBorder(),
              ),
              maxLines: 2,
              onChanged: (value) {
                _instructions = value;
              },
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop(
                  SelectedMedicine(
                    medicine: widget.medicine,
                    dosage: _selectedDosage,
                    frequency: _selectedFrequency,
                    duration: _duration,
                    instructions: _instructions,
                  ),
                );
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blueAccent,
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8)),
              ),
              child: const Text('Add to Prescription',
                  style: TextStyle(color: Colors.white)),
            ),
            const SizedBox(height: 16),
          ],
        ),
      ),
    );
  }
}
